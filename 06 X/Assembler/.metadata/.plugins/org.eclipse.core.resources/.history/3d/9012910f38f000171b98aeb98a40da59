import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.HashMap;

public class HackAssemblerObjetos {
	private String linea;
	private String dest;
	private String binaryDest;
	private String comp;
	private String binaryComp;
	private String jump;
	private String binaryJump;
	private Path archivoEntrada;
	private Path archivoSalida;
	private Charset conjuntoCaracteres;
	private HashMap<String, Integer> tablaDeSimbolos = new HashMap<String, Integer>();	
	public int direccionVariable = 16;	
	private Code code = new Code();
	
	private void validarArgumentos(String[] argumentos) {
		Argumentos arg = new Argumentos();
		arg.validar(argumentos);
		
		conjuntoCaracteres = Charset.forName("ISO-8859-1");
		archivoEntrada = Paths.get(arg.getEntrada());
		archivoSalida = Paths.get(arg.getSalida());
	}
	
	private void resolverSimbolos(){
		Simbolos simbolos = new Simbolos();
		tablaDeSimbolos = simbolos.resolver(tablaDeSimbolos, archivoEntrada);
	}
	
	private void ensamblar(){
		try (BufferedReader lector = Files.newBufferedReader(archivoEntrada,
				conjuntoCaracteres);
				BufferedWriter escribir = Files.newBufferedWriter(archivoSalida, 
						conjuntoCaracteres, StandardOpenOption.CREATE)) {
			
			linea = null;
			
			while ((linea = lector.readLine()) != null) {
				linea = linea.trim();	// Sacamos todos los espacios en blanco a izquierda y derecha
				
				// Si la línea está vacía, seguimos a la próxima:
				if (linea.equals("")) { continue; }
				
				// Si hay un comentario de línea, seguimos a la próxima
				if (linea.charAt(0)=='/' && linea.charAt(1)=='/') {	continue; }
				
				// Si hay un símbolo de goto, seguimos a la próxima
				if (linea.charAt(0)=='(' && linea.contains(")")) { continue; }
				
				// Si hay un comentario luego de la expresión, lo sacamos
				if (linea.contains("//")) {
					int comentario = linea.indexOf("//");	// Buscamos el índice en donde aparece
					linea = linea.substring(0, comentario);	// Cortamos desde el principio hasta ahí
					linea = linea.trim();	// Le sacamos los espacios en blanco que quedaron
				}
								
				if (linea.charAt(0)=='@') {	// A-Instruction
					
					StringBuilder binario = code.a(tablaDeSimbolos, linea);
					escribir.write(binario.toString() + "\n");	// Lo escribimos al archivo
					continue;	// Seguimos a la siguiente línea
				}
				
				Parser parse = new Parser(linea);
				comp = parse.getComp();
				dest = parse.getDest();
				jump = parse.getJump();
				
				binaryComp = code.comp(comp);
				binaryDest = code.dest(dest);
				binaryJump = code.jump(jump);
								
				String cInstruction = "111" + binaryComp + binaryDest + binaryJump;	// Armamos la instrucción
				escribir.write(cInstruction + "\n");	// Lo escribimos al archivo
			}
		} catch (IOException e) {
			System.err.println("Error al abrir el archivo.");
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		HackAssemblerObjetos a = new HackAssemblerObjetos();
		
		a.validarArgumentos(args);
		a.resolverSimbolos();
		a.ensamblar();
	}

}
