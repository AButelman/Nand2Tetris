import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Code {
	private int numero;
	
	public Code() { };
	
	public StringBuilder a(HashMap<String, Integer> tablaDeSimbolos, String linea, int direccionVariable) {
		Pattern patron = Pattern.compile("@\\D");	// Cualquier símbolo que no sea un número
		Matcher coincidencia = patron.matcher(linea);	// Buscamos si hay letras luego de la @
		
		// Si hay una @ seguida de letras y no números, al principio de la expresión
		if (coincidencia.find() && coincidencia.start() == 0) {	
		
			linea = linea.substring(1);	// Le sacamos la arroba
									
			// Chequeamos si el texto ya es un símbolo (predefinido, Goto o variable)
			if (tablaDeSimbolos.containsKey(linea)) {
					numero = Integer.valueOf(tablaDeSimbolos.get(linea));	// Tomamos el valor, pasando la clave
			} else {	// Si no, es una variable no declarada		
				// La agregamos	
				tablaDeSimbolos.put(linea, new Integer(direccionVariable)); 
				numero = direccionVariable;	// Ponemos la dirección en el statement
				direccionVariable++;	// Actualizamos a la próxima dirección disponible
			}
			
					
		} else { // Si no, convertimos lo que sigue a la @ en un entero
			numero = Integer.valueOf(linea.substring(1)); 
			
			if (numero > 32767) {
				System.err.println("Error de sintaxis, los números asignados a las"
						+ " instrucciones-A van de 0 a 32767");
			}
		}
		
		// Lo convertimos a una String en binario
		String num = Integer.toBinaryString(numero);	
		
		// Le agregamos 0s al principio hasta llegar a los 16 dígitos
		StringBuilder binario = new StringBuilder(num);
		while (binario.length() < 16) {
			binario.insert(0, '0');
		}
		
		return binario;
	}
	
	public String comp(String comp) {
		switch (comp) {	// Convertimos comp a binario
		case ("0"):
			return "0101010";
		case ("1"):
			return "0111111";
		case ("-1"):
			return "0111010";
		case ("D"):
			return "0001100";
		case ("A"):
			return "0110000";
		case ("!D"):
			return "0001101";
		case ("!A"):
			return "0110001";
		case ("-D"):
			return "0001111";
		case ("-A"):
			return "0110011";
		case ("D+1"):
			binaryComp = "0011111";
			break;
		case ("A+1"):
			binaryComp = "0110111";
			break;
		case ("D-1"):
			binaryComp = "0001110";
			break;
		case ("A-1"):
			binaryComp = "0110010";
			break;
		case ("D+A"):
			binaryComp = "0000010";
			break;
		case ("D-A"):
			binaryComp = "0010011";
			break;
		case ("A-D"):
			binaryComp = "0000111";
			break;
		case ("D&A"):
			binaryComp = "0000000";
			break;
		case ("D|A"):
			binaryComp = "0010101";
			break;
		case ("M"):
			binaryComp = "1110000";
			break;
		case ("!M"):
			binaryComp = "1110001";
			break;
		case ("-M"):
			binaryComp = "1110011";
			break;
		case ("M+1"):
			binaryComp = "1110111";
			break;
		case ("M-1"):
			binaryComp = "1110010";
			break;
		case ("D+M"):
			binaryComp = "1000010";
			break;
		case ("D-M"):
			binaryComp = "1010011";
			break;
		case ("M-D"):
			binaryComp = "1000111";
			break;
		case ("D&M"):
			binaryComp = "1000000";
			break;
		case ("D|M"):
			binaryComp = "1010101";
			break;
		default:
			System.err.println("Error de sintaxis.");
			System.exit(0);
	}
		
	
	}
}
