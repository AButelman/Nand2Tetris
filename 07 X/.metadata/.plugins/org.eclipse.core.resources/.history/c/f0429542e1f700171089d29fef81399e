import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.StringTokenizer;

public class Parser {
	private Charset conjuntoCaracteres;
	private Path archivoALeer;
	private BufferedReader lector;
	private String linea;
	private Comandos comando;
	private String comandoST;
	private String arg1;
	private int arg2;
	
	public Parser(String nombreArchivo) {
		conjuntoCaracteres = Charset.forName("ISO-8859-1");
		archivoALeer = Paths.get(nombreArchivo);
		try {
			lector = Files.newBufferedReader(archivoALeer,conjuntoCaracteres);
		} catch (IOException e){
			System.err.println("Error en la lectura del archivo " + archivoALeer);
			e.getStackTrace();
		}
	}
	
	public boolean hasMoreCommands(){
		return true;
	}
	
	public void advance(){	// Lee la siguiente línea y parsea sus comandos
		try {
			do {
				linea = lector.readLine();	// Leemos la próxima línea del archivo
				linea = linea.trim();	// Sacamos los espacios en blanco de principio y final
			} while(linea.equals("") || linea.startsWith("//"));	// Si la línea está en blanco o es un comentario, volvemos a leer
			
			// Si hay un comentario luego de la expresión, lo sacamos
			if (linea.contains("//")) {
				int comentario = linea.indexOf("//");	// Buscamos el índice en donde aparece
				linea = linea.substring(0, comentario);	// Cortamos desde el principio hasta ahí
				linea = linea.trim();	// Le sacamos los espacios en blanco que quedaron
			}
			
			// Parseamos el comando y los argumentos
			StringTokenizer st = new StringTokenizer(linea);	// Dividimos la línea por sus espacios
			
			switch (st.countTokens()) {
			case (1):	// Si tiene un sólo comando, es un comando aritmético
				comandoST = st.nextToken();	
				if (comandoST.equals("add") || comandoST.equals("sub") // Vemos cual es 
					|| comandoST.equals("neg") || comandoST.equals("eq")
					|| comandoST.equals("gt") || comandoST.equals("lt")
					|| comandoST.equals("and") || comandoST.equals("or")
					|| comandoST.equals("not")) {
				
					comando = Comandos.C_ARITHMETIC;
					arg1 = comandoST;
				}
				return;		// Salimos de la línea
				
			case (3):	// Un comando con dos argumentos, String e int
				comandoST = st.nextToken();
				arg1 = st.nextToken();
				arg2 = Integer.parseInt(st.nextToken());
				
				switch (comandoST) {	// Si es un comando push o pop
					case ("push"): 
						comando = Comandos.C_PUSH;
						break;
					case ("pop"):
						comando = Comandos.C_POP;
						break;
					}
				return;		// Salimos de la línea
				
			default:	// Si la línea no tiene 1 o 3 comandos, hay un error de sintaxis
				System.err.println("Error de sintaxis");
				System.exit(0);
			}
		} catch (IOException e){
			System.err.println("Error en la lectura del archivo " + archivoALeer);
			System.exit(0);
		}		
	}
	
	public Comandos commandType() { return comando; }
	public String getArg1() { return arg1; }
	public int getArg2() { return arg2; }
}
