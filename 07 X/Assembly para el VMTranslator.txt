ARGUMENT	LOCAL		STACK

0 - 9		0 - 9		
1 - 14		1 - 29		
		2 - true	
				

push argument 1
pop static 2

RAM

256 - 22
257 - 31
258 - 231
259 - 31
p1 = 258
p2 = 257

1.p1 = 256
2.p1 = p1 + 3
3.*p1 = *p1 + 3
4.p2 = p1 - 2
5.p1--
6.*(p2 + 1) = *p1 + *p2	

// RESOLUCIÓN DEL PROYECTO

add:	XXXX

@SP
AM=M-1	//SP--
D=M	// D = *SP
@SP
AM=M-1	//SP--
D=D+M	// D = D + *SP
@SP
A=M
M=D	// *SP = D
@SP
M=M+1	// SP++

sub:	XXXX

@SP
M=M-1
AM=M-1	// SP - 2
D=M	// D = *(SP - 2) = x
@SP
M=M+1	// SP + 1
A=M
D=D-M	// D = D - *SP = x - y
@SP
AM=M-1	// SP - 1
M=D	// *SP = D
@SP
M=M+1	// SP++

neg:	XXXX 

@SP
AM=M-1	// SP--
M=-M	// *SP = -*SP
@SP
M=M+1	// SP++

eq:	XXXX 	LOS SÍMBOLOS SE VAN GENERANDO DINÁMICAMENTE, YA QUE SI NO SE REPETIRÍAN. NNNN REPRESENTA AL NÚMERO DE SÍMBOLO.

@SP
AM=M-1	// SP--
D=M	// D = *SP
@SP
AM=M-1	// SP--
D=D-M	// D = D - *SP
@IGUALNNNN
D;JEQ	// Si d = 0, entonces los números eran iguales, goto IGUAL
@SP	// Si no, eran diferentes, escribimos FALSE (0)
A=M
M=0	// *SP = FALSE (0)
@FINNNNN
0;JMP	// GOTO FIN

(IGUALNNNN)
@SP
A=M
M=-1	// *SP = TRUE (-1)

(FINNNNN)
@SP
M=M+1	// SP++

gt:	XXXX

@SP
M=M-1	
AM=M-1	// SP - 2
D=M	// D = *SP = x
@SP
AM=M+1	// SP++
D=D-M	// D = D - *SP = x - y
@MAYORNNNN
D;JGT	// Si d > 0 entonces x > y, goto MAYOR
@SP	// Si no, escribimos FALSE (0)
AM=M-1	// SP--
M=0	// *SP = FALSE (0)
@FINNNNN
0;JMP	// GOTO FIN

(MAYORNNNN)
@SP
AM=M-1	// SP--
M=-1	// *SP = TRUE (-1)

(FINNNNN)
@SP
M=M+1	// SP++


lt:	XXXX

@SP
M=M-1	
AM=M-1	// SP - 2
D=M	// D = *SP = x
@SP
AM=M+1	// SP++
D=D-M	// D = D - *SP = x - y
@MENORNNNN
D;JLT	// Si d < 0 entonces x < y, goto MENOR
@SP	// Si no, escribimos FALSE (0)
AM=M-1	// SP--
M=0	// *SP = FALSE (0)
@FINNNNN
0;JMP	// GOTO FIN

(MENORNNNN)
@SP
AM=M-1	// SP--
M=-1	// *SP = TRUE (-1)

(FINNNNN)
@SP
M=M+1	// SP++


and:	XXXX

@SP
AM=M-1	//SP--
D=M	// D = *SP = y
@SP
AM=M-1	//SP--
D=D&M	// D = D & *SP = y & x
@SP
A=M
M=D	// *SP = D
@SP
M=M+1	// SP++


or:	XXXX

@SP
AM=M-1	//SP--
D=M	// D = *SP = y
@SP
AM=M-1	//SP--
D=D|M	// D = D | *SP = y | x
@SP
A=M
M=D	// *SP = D
@SP
M=M+1	// SP++


not:	XXXX

@SP
AM=M-1	// SP--
M=!M	// *SP = !*SP
@SP
M=M+1	// SP++


push constant 17 :	XXXX
	*SP = i (17), SP++
@17
D=A	// D = 17
@SP
A=M	// A = Lo que haya en RAM[0}: SP (Stack Pointer)
M=D	// *SP = 17
@SP
M=M+1	// SP++


push local i:	XXXX	SE USA PARA TODOS LOS SEGMENTOS, SALVO STATIC, POINTER Y TEMP

@LCL
D=M	// D = LCL
@i
D=D+A	// D = LCL + i

A=D
D=M	// D = *(LCL + i)

@SP
A=M
M=D	// *SP = *addr

@SP
M=M+1	// SP++

pop local i:	XXXX SE USA PARA TODOS LOS SEGMENTOS, SALVO STATIC, POINTER Y TEMP

addr=LCL+i
SP--
*addr=*SP

@LCL
D=M	// D = LCL
@i
D=D+A	// D = LCL + i
@addr
M=D	// addr = LCL + i

@SP
M=M-1	// SP--

A=M
D=M	// D = *SP

@addr
A=M
M=D	// addr = *SP


push pointer i:		XXXX	SE USA TAMBIÉN PARA TEMP, CAMBIANDO EL PRIMER NÚMERO A 5 CON JAVA

@3
D=A	// D = 3
@i	// siendo i una constante definida en el statement de la vm (un número, no una variable)
A=D+A	// D = 3 + i
D=M	// D = *(3 + i)

@SP
A=M
M=D	// *SP = *(3 + i)

@SP
M=M+1	// SP++


pop pointer i:	XXXX	SE USA TAMBIÉN PARA TEMP, CAMBIANDO EL PRIMER NÚMERO A 5 CON JAVA

addr= 3 + i
SP--
*addr = *SP

@3
D=A	// D = 3
@i
D=D+A	// D = 3 + i
@addr
M=D	// addr = 3 + i

@SP
AM=M-1	// SP--
D=M	// D = pop

@addr
A=M
M=D	// *addr = *SP


push static i:	XXXX

@nombreArchivo.i	// El assembler lo pondrá en la primera posición de memoria disponible a partir de la 16
D=M	// D = static i

@SP
A=M
M=D	// *SP = static i

@SP
M=M+1	// SP++

pop static i:	XXXX

@SP
M=M-1	// SP--
A=M
D=M	// D = *SP

@nombreArchivo.i
M=D	// static i = *SP
